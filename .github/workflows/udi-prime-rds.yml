name: Prime UDI schema generator

on:
  workflow_dispatch: # Manual trigger
  
jobs:
  check-mat-refresh-action-status:
    runs-on: ubuntu-latest
    outputs:
      action-running: ${{ steps.check-action.outputs.action-running }}

    steps:
      - name: Check if another workflow is running
        id: check-action
        run: |
          # Replace with the actual workflow ID or filename (e.g., main.yml)
          WORKFLOW_ID="udi-prime-mat-refresh-data-only.yml"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          # Get the running workflow runs for the same repo and the specific workflow
          RUNNING=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/workflows/$WORKFLOW_ID/runs?status=in_progress&per_page=1" \
          | jq '.workflow_runs | length')

          if [ "$RUNNING" -gt 0 ]; then
            echo "Action is already running"
            echo "::set-output name=action-running::true"
          else
            echo "No action is running"
            echo "::set-output name=action-running::false"
          fi

  schema-generation:
    runs-on: techbd-sql
    needs: check-mat-refresh-action-status
    if: needs.check-mat-refresh-action-status.outputs.action-running == 'false'
    steps:
      - name: Running schema generation since UDI Mat Refresh (data-only) is not running
        run: echo "Running schema generation since UDI Mat Refresh (data-only) is not running."

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .pgpass file
        run: |
          # Write the metadata comment to the .pgpass file
          echo "# { id: \"PROD_TECHBD_UDI_DS_PRIME\", description: \"UDI Prime database \", boundary: \"Production\" }" > ~/.pgpass

          # Append the database connection details to the .pgpass file
          echo "${{ secrets.PROD_TECHBD_UDI_DS_PRIME_HOST }}:${{ secrets.PROD_TECHBD_UDI_DS_PRIME_PORT }}:${{ secrets.PROD_TECHBD_UDI_DS_PRIME_NAME }}:${{ secrets.PROD_TECHBD_UDI_DS_PRIME_USER }}:${{ secrets.PROD_TECHBD_UDI_DS_PRIME_PASSWORD }}" >> ~/.pgpass

          # Set the .pgpass file permissions to 600 (read and write for owner only)
          chmod 600 ~/.pgpass

      - name: Clone SQL Aide repository
        run: |
          git clone https://github.com/netspective-labs/sql-aide.git

      - name: Navigate to SQL Aide and Generate ISLM SQL
        run: |
          cd sql-aide/lib/postgres/islm
          chmod +x islmctl.ts
          ./islmctl.ts evolve up --conn-id PROD_TECHBD_UDI_DS_PRIME

      - name: Run ISLM test
        run: |
          cd sql-aide/lib/postgres/islm
          ./islmctl.ts evolve test --conn-id PROD_TECHBD_UDI_DS_PRIME

      - name: Display ISLM Test log
        run: |
          cd sql-aide/lib/postgres/islm
          log_file=$(ls -t ./islmctl-test-*.log | head -n 1)
          cat "$log_file"

      - name: Clone Polyglot Prime repository
        run: git clone https://github.com/tech-by-design/polyglot-prime.git

      - name: Navigate to UDI Prime and Generate SQL
        run: |
          cd polyglot-prime/udi-prime
          ./udictl.ts ic generate sql

      - name: Load SQL into database
        run: |
          cd polyglot-prime/udi-prime
          ./udictl.ts ic load-sql --conn-id PROD_TECHBD_UDI_DS_PRIME

      - name: Display Load SQL log
        run: |
          cd polyglot-prime/udi-prime
          log_file=$(ls -t ./udictl-load-sql-*.log | head -n 1)
          cat "$log_file"

      - name: Run UDI test
        run: |
          cd polyglot-prime/udi-prime
          ./udictl.ts ic test --conn-id PROD_TECHBD_UDI_DS_PRIME

      - name: Run UDI Migrations
        run: |
          cd polyglot-prime/udi-prime
          ./udictl.ts ic migrate --conn-id PROD_TECHBD_UDI_DS_PRIME

      - name: Display UDI Test log
        run: |
          cd polyglot-prime/udi-prime
          log_file=$(ls -t ./udictl-test-*.log | head -n 1)
          cat "$log_file"