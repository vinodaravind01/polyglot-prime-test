management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: actuator,beans,env,openapi,swagger-ui,health,info,metrics
  health:
    db:
      enabled: true
  endpoint:
    beans:
      enabled: true
    env:
      enabled: true
      show-values: when-authorized
    health:
      enabled: true
      show-details: always
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  info:
    git:
      mode: full
    build:
      enabled: true
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
org:
  techbd:
    service:
      http:
        hub:
          prime:
            defaultDatalakeApiUrl: https://qa.hrsn.nyehealth.org/HRSNBundle
            defaultDataLakeApiAuthn:
              # The allowed values for mTlsStrategy are as follows:
              # - no-mTls: No mTLS is used. The WebClient sends a standard HTTP POST request to the scoring engine API without mutual TLS (mTLS).
              # - aws-secrets: mTLS is enabled. The WebClient retrieves the TLS key and certificate from AWS Secrets Manager, and then sends an HTTPS POST request to the scoring engine API with mutual TLS authentication.
              # - mTlsResources: mTLS is enabled. The WebClient reads the TLS key and certificate from a local folder, and then sends an HTTPS POST request to the scoring engine API with mutual TLS authentication.
              # - post-stdin-payload-to-nyec-datalake-external: This option runs a bash script via ProcessBuilder. The payload is passed through standard input (STDIN) to the script, which uses `curl` to send the request to the scoring engine API. In the `phiqa` environment, mTLS is enabled for this request. In other environments, mTLS is disabled for this script.
              mTlsStrategy: post-stdin-payload-to-nyec-datalake-external
              mTlsResources:
                # Path to the TLS key resource for mTLS.
                mTlsKeyResourceName: src/main/resources/certificates/scoring-engine/nyec-client-key.key # File is blank by default.Add key here.
                # Path to the TLS certificate resource for mTLS.
                mTlsCertResourceName: src/main/resources/certificates/scoring-engine/nyec-cert.pem # File is blank by default.Add certificate here.
              mTlsAwsSecrets: 
                mTlsKeySecretName: techbd-qa-client-key # The name of the AWS Secrets Manager secret that holds the mTLS private key
                mTlsCertSecretName: techbd-qa-client-certificate  # The name of the AWS Secrets Manager secret that holds the mTLS client certificate
              postStdinPayloadToNyecDataLakeExternal:
                # The command requires tenantId as argument 1 and payload via STDIN
                # The command will return a status as a normal process and STDOUT will include all verbose debugging
                #cmd: support/bin/post-stdin-payload-to-nyec-datalake-qa-endpoint-via-mtls.sh
                cmd: /usr/bin/post-stdin-payload-to-nyec-datalake-qa-endpoint-via-mtls.sh
                # Wait time to receive response from scoring engine
                timeout: 180